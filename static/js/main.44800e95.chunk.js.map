{"version":3,"sources":["Header.js","Movie.js","App.js","reportWebVitals.js","index.js"],"names":["Header","className","href","target","rel","Movie","id","year","title","summary","poster","genres","src","alt","map","genre","i","length","slice","fetchUri","App","state","isLoaded","movies","getMovies","a","axios","get","data","console","log","setState","this","movie","medium_cover_image","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gUAiBeA,MAjBf,WACI,OACI,sBAAKC,UAAU,SAAf,UACI,0CAGA,mBACAC,KAAK,4BACLC,OAAO,SACPC,IAAI,sBAHJ,6BCqBGC,MAzBf,YAA2D,EAA3CC,GAA2C,EAAvCC,KAAwC,IAAlCC,EAAiC,EAAjCA,MAAOC,EAA0B,EAA1BA,QAASC,EAAiB,EAAjBA,OAAQC,EAAS,EAATA,OAC9C,OACI,sBAAKV,UAAU,QAAf,UACI,qBAAKW,IAAKF,EAAQG,IAAI,SAASL,MAAOA,EAAOP,UAAU,kBACvD,sBAAKA,UAAU,cAAf,UACI,qBAAKA,UAAU,eAAf,SACKO,IAEL,oBAAIP,UAAU,gBAAd,SAA+BU,EAAOG,KAAI,SAACC,EAAOC,GAAR,OAAY,6BAAaD,GAAJC,QAC/D,qBAAKf,UAAU,iBAAf,SACKQ,EAAQQ,OAAO,IAAMR,EAAQS,MAAM,EAAG,KAAK,MAAOT,W,iBCHjEU,EAAW,4CAiDFC,E,4MA9CbC,MAAQ,CACNC,UAAU,EACVC,OAAQ,I,EAEVC,U,sBAAY,8BAAAC,EAAA,sEAKAC,IAAMC,IAAIR,GALV,gBAGEI,EAHF,EAERK,KACEA,KAAQL,OAGZM,QAAQC,IAAIP,GACZ,EAAKQ,SAAS,CAAER,SAAQD,UAAU,IAPxB,2C,uDAUZ,WACEU,KAAKR,c,oBAEP,WAAU,IAAD,EACsBQ,KAAKX,MAA1BE,EADD,EACCA,OAAQD,EADT,EACSA,SAChB,OACE,sBAAKrB,UAAU,MAAf,UACE,cAAC,EAAD,IACCqB,EACC,qBAAKrB,UAAU,SAAf,SACGsB,EAAOT,KAAI,SAAAmB,GAAK,OACf,cAAC,EAAD,CAEE3B,GAAI2B,EAAM3B,GACVC,KAAM0B,EAAM1B,KACZC,MAAOyB,EAAMzB,MACbC,QAASwB,EAAMxB,QACfC,OAAQuB,EAAMC,mBACdvB,OAAQsB,EAAMtB,QANTsB,EAAM3B,SAUjB,qBAAKL,UAAU,SAAf,SACE,oD,GAtCMkC,IAAMC,WCCTC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCFdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.44800e95.chunk.js","sourcesContent":["function Header() {\r\n    return (\r\n        <div className=\"Header\">\r\n            <p>\r\n                Movie App\r\n            </p>\r\n            <a\r\n            href=\"https://github.com/eehwan\"\r\n            target=\"_blank\"\r\n            rel=\"noopener noreferrer\"\r\n            >\r\n                Github Link\r\n            </a>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Header;\r\n","import PropTypes from 'prop-types';\r\n\r\nfunction Movie({id, year, title, summary, poster, genres}) {\r\n    return (\r\n        <div className=\"Movie\">\r\n            <img src={poster} alt=\"poster\" title={title} className=\"movie__poster\"></img>\r\n            <div className=\"movie__data\">\r\n                <div className=\"movie__title\">\r\n                    {title}\r\n                </div>\r\n                <ul className=\"movie__genres\">{genres.map((genre, i)=><li key={i}>{genre}</li>)}</ul>\r\n                <div className=\"movie__summary\">\r\n                    {summary.length>250 ? summary.slice(0, 250)+\"...\": summary}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\nMovie.propTypes = {\r\n    id: PropTypes.number.isRequired,\r\n    year: PropTypes.number.isRequired,\r\n    title: PropTypes.string.isRequired,\r\n    summary: PropTypes.string.isRequired,\r\n    poster: PropTypes.string.isRequired,\r\n    genres: PropTypes.arrayOf(PropTypes.string).isRequired,\r\n};\r\n\r\nexport default Movie;\r\n","import './reset.css';\nimport './App.css';\nimport './Header.css'\nimport './Movies.css'\nimport React from 'react';\nimport Header from './Header';\nimport Movie from './Movie';\nimport axios from 'axios';\n\nconst fetchUri = \"https://yts-proxy.now.sh/list_movies.json\";\n\nclass App extends React.Component {\n  state = {\n    isLoaded: false,\n    movies: []\n  };\n  getMovies = async () => {\n    const {\n      data: {\n        data: { movies }\n      }\n    } = await axios.get(fetchUri);\n    console.log(movies);\n    this.setState({ movies, isLoaded: true });\n  };\n\n  componentDidMount() {\n    this.getMovies();\n  }\n  render() {\n    const { movies, isLoaded } = this.state\n    return  (\n      <div className=\"App\">\n        <Header />\n        {isLoaded\n        ? <div className=\"Movies\">\n            {movies.map(movie => \n              <Movie\n                key={movie.id}\n                id={movie.id}\n                year={movie.year}\n                title={movie.title}\n                summary={movie.summary}\n                poster={movie.medium_cover_image}\n                genres={movie.genres}\n              />\n            )}\n          </div>\n        : <div className=\"loader\">\n            <p>\n              loading...\n            </p>\n          </div>}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}